---

- hosts: all
  tasks:
    - ansible.builtin.setup:
      register: setup
    - ansible.builtin.debug: var=setup

    - name: Get user's SHELL
      command: /usr/bin/printenv SHELL
      register: user_shell
      changed_when: false
      check_mode: false
    - name: Get user's SHELL
      set_fact:
        shell: "{{ user_shell.stdout }}"
        shell_name: "{{ user_shell.stdout | split('/') | last }}"

    # Normalize the PATH for predictable playbook runs across local and ssh connections.
    # * For ssh connections:
    #   Ansible executes its remote commands in a non-login and non-interactive shell,
    #   which has the effect that `/etc/profile` and `~/.bash_profile` (or `~/.zprofile`) are not sourced.
    #   To resolve this, we create a new login shell.
    # * For local connections:
    #   Environment variables are inherited from the user's existing session,
    #   but they inherit unwanted PATH modifications (e.g. made through virtual environments and `~/.bashrc` (or `~/.zshrc`)).
    #   To resolve this, we clear any inherited env vars prior to creating a new login shell.
    - name: Get user's PATH
      command: /usr/bin/env -i HOME="$HOME" {{ shell }} -l -c '/usr/bin/printenv PATH'
      register: user_path
      changed_when: false
      check_mode: false
    - name: Get user's PATH
      set_fact:
        path: "{{ user_path.stdout }}"

    # Local connections set the interpreter to the same one used by the Ansible controller via the localhost inventory plugin.
    # For remote connections, find the python interpreter from our PATH (playbooks should use the normalized PATH above).
    - name: Set ansible_python_interpreter
      set_fact:
        ansible_python_interpreter: "/usr/bin/env python3"
      when: ansible_connection != 'local'
  tags: always
